// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String       @id @default(uuid())
  userName      String       
  userEmail     String       @unique
  phoneNum      String       @unique
  gender        String
  birthDate     String
  password      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  profileImage  String?      // Add this field to store the profile image as binary data

  travelPosts   TravelPost[]   @relation("UserTravelPosts")
  buddyRequests BuddyRequest[] @relation("UserBuddyRequests")
  hikingPosts   HikingPost[]   
  comments      Comment[]      
  reports       Report[]      
  reviews       Review[]    
}

model TravelPost {
  travelPostId    String        @id @default(uuid())
  startDate       DateTime      @map("start_date")
  endDate         DateTime      @map("end_date")
  destination     String
  buddyPreference Json[]        @db.Json
  additionalInfo  String?
  buddyId         String?     // Add this field to store the buddy's userId
  buddyFound      Boolean       @default(false) // Indicate whether a buddy has been found

  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  creator         User          @relation("UserTravelPosts", fields: [creatorId], references: [userId]) 
  creatorId       String

  buddyRequests   BuddyRequest[] @relation("TravelPostBackRequests")
}


model BuddyRequest {
  buddyRequestId  String        @id @default(uuid())
  requester      User          @relation("UserBuddyRequests", fields: [requesterId], references: [userId]) 
  requesterId    String
  post           TravelPost    @relation("TravelPostBackRequests", fields: [postId], references: [travelPostId])
  postId         String
  createdAt      DateTime      @default(now())
  requestStatus  String        @default("Pending")
}

model HikingPost {
  postId      String    @id @default(uuid())
  userId      String?
  title       String
  content     String
  imageUrl    String[]
  comments    Comment[]
  voteCounter Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reports     Report[]
  user        User?     @relation(fields: [userId], references: [userId])
}

model Comment {
  commentId  String     @id @default(uuid())
  user       User?      @relation(fields: [userId], references: [userId])
  userId     String?
  postId     String
  comment    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  hikingPost HikingPost @relation(fields: [postId], references: [postId])
}

model Report {
  reportId      String      @id @default(uuid())
  user          User?       @relation(fields: [userId], references: [userId])
  userId        String?
  hikingPost    HikingPost? @relation(fields: [postId], references: [postId])
  postId        String?
  reportTitle   String
  reportContent String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Trail {
  trailId           String   @id @default(uuid())
  trailName         String
  trailLat          String?
  trailLng          String?
  trailLocation     String?
  trailType         String
  trailDifficulty   String
  trailLength       String
  estimatedDuration String
  trailDescription  String
  amenities         String[]
  trailImagesUrl    String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  reviews           Review[]
}

model Review {
  reviewId      String   @id @default(uuid())
  trail         Trail?   @relation(fields: [trailId], references: [trailId])
  trailId       String?
  user          User?    @relation(fields: [userId], references: [userId])
  userId        String?
  reviewTitle   String
  reviewContent String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
